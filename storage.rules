rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Allow repository owners and collaborators to access files
    match /repositories/{repositoryId}/{allPaths=**} {
      // 1. Reading permissions
      allow read: if request.auth != null && (
        // Either the file is in a public repository
        exists(/databases/$(database)/documents/repositories/$(repositoryId)) &&
        get(/databases/$(database)/documents/repositories/$(repositoryId)).data.isPublic == true ||
        // Or the user is the owner of the repository
        exists(/databases/$(database)/documents/repositories/$(repositoryId)) &&
        get(/databases/$(database)/documents/repositories/$(repositoryId)).data.ownerId == request.auth.uid ||
        // Or the user is a collaborator
        exists(/databases/$(database)/documents/repositories/$(repositoryId)) &&
        request.auth.uid in get(/databases/$(database)/documents/repositories/$(repositoryId)).data.collaborators
      );
      
      // 2. Writing permissions
      allow write: if request.auth != null && (
        // User is the owner of the repository
        exists(/databases/$(database)/documents/repositories/$(repositoryId)) &&
        get(/databases/$(database)/documents/repositories/$(repositoryId)).data.ownerId == request.auth.uid ||
        // Or the user is a collaborator
        exists(/databases/$(database)/documents/repositories/$(repositoryId)) &&
        request.auth.uid in get(/databases/$(database)/documents/repositories/$(repositoryId)).data.collaborators
      );
    }
    
    // Allow user profile files access
    match /users/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Temporary access during fork operations (for system processes)
    match /temp/{sessionId}/{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
} 